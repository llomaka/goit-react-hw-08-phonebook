{"version":3,"file":"static/js/704.abc4e9bd.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Header/Header.module.css?4e72","components/Header/Header.jsx","hooks/useSnackbar.js","hooks/useContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/ContactModal/ContactModal.jsx","components/ContactsTableItem/ContactsTableItem.jsx","components/ContactsTable/ContactsTable.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Header_text__4jGdp\"};","import PropTypes from 'prop-types';\nimport styles from './Header.module.css';\n\nexport default function Header({ text }) {\n  return (\n    <h1 className={styles.text}>{text}</h1>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\n\nexport default function useSnackbar() {\n  const [snackbar, setSnackbar] = useState({\n    'open': false,\n    'message': ''\n  });\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbar(prevState => {\n      return {\n        ...prevState,\n        'open': false,\n      }\n    });\n  };\n\n  const setOpen = () => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'open': true,\n    };\n  });\n\n  const setMessage = (message) => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'message': message,\n    }\n  })\n\n  return { open: snackbar.open, setOpen, message: snackbar.message, setMessage, handleClose };\n}\n","import { useState, useId } from 'react';\n\nexport default function useContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const id = useId();\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return { name, setName, number, setNumber, id, openModal, setOpenModal, handleInputChange, resetForm };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\"};","import useContactForm from 'hooks/useContactForm';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useSelector, useDispatch } from 'react-redux';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport TextField from '@mui/material/TextField';\nimport Snackbar from '@mui/material/Snackbar';\nimport useSnackbar from 'hooks/useSnackbar';\nimport AddIcon from '@mui/icons-material/Add';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const { name, number, id, handleInputChange, resetForm } = useContactForm();\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.contacts);\n  const isLoading = useSelector(contactsSelectors.isCreating);\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (contacts?.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      setMessage(`${name} is already in Contacts List!`);\n      return setOpen();\n    }\n    dispatch(contactsOperations.createContact({ name, number }));\n    setMessage(`${name} is successfully added to Contacts List!`);\n    setOpen();\n    resetForm();\n  };\n\n  return (\n    <>\n      <form\n        className={styles.form}\n        autoComplete='on'\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          autoFocus\n          margin='dense'\n          id={id + 'name'}\n          label='Full Name'\n          name='name'\n          type='text'\n          variant='standard'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder='John Smith'\n          onChange={handleInputChange}\n          value={name}\n        />\n        <TextField\n          margin='dense'\n          id={id + 'number'}\n          label='Phone Number'\n          name='number'\n          type='tel'\n          variant='standard'\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n          required\n          placeholder='050-123-23-23'\n          onChange={handleInputChange}\n          value={number}\n        />\n        <LoadingButton startIcon={<AddIcon />} type='submit' onClick={handleSubmit} name='submit_button' variant='contained' loading={isLoading}>Add contact</LoadingButton>\n      </form>\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Filter_header__6akjb\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { filterSelector } from 'redux/filter';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport Box from '@mui/material/Box';\nimport { DebounceInput } from 'react-debounce-input';\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  const onChange = event => dispatch(changeFilter(event.target.value));\n\n  return (\n    <Box\n      sx={{\n        textAlign: 'center',\n        marginBottom: '15px',\n      }}\n    >\n      <h2 className={styles.header}>Find contact by name</h2>\n        <DebounceInput\n          element='input'\n          debounceTimeout={700}\n          className={styles.input}\n          type='text'\n          name='filter'\n          onChange={onChange}\n          value={filter}\n        />\n    </Box>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport Button from '@mui/material/Button';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport useContactForm from 'hooks/useContactForm';\nimport useSnackbar from 'hooks/useSnackbar';\nimport Snackbar from '@mui/material/Snackbar';\nimport EditIcon from '@mui/icons-material/Edit';\n\nexport default function ContactModal({ contactObj, openModal, setOpenModal }) {\n  const { name, setName, number, setNumber, id, handleInputChange, resetForm } = useContactForm();\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n  const dispatch = useDispatch();\n  const isEditing = useSelector(contactsSelectors.isEditing);\n\n  useEffect(() => {\n    setName(contactObj.name);\n    setNumber(contactObj.number);\n  }, [contactObj, setName, setNumber]);\n\n  const handleModalClose = (event) => {\n    if (event.target.name !== 'edit') {\n      setOpenModal(false);\n      resetForm();\n      return;\n    }\n    if ((name.toLowerCase() === contactObj.name.toLowerCase()) && (number === contactObj.number)) {\n      setMessage(`Please make changes to contact ${name} information or press Cancel to exit Edit Contact dialog.`);\n      return setOpen();\n    }\n    dispatch(contactsOperations.editContact({ id: contactObj.id, name, number }));\n    setMessage(`Contact ${name} information is successfully changed!`);\n    setOpen();\n    resetForm();\n    setOpenModal(false);\n};\n\n  return (\n    <>\n      {name && <Dialog open={openModal} onClose={handleModalClose}>\n        <DialogTitle>Contact Information</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin='dense'\n            id={id + 'name'}\n            label='Full Name'\n            name='name'\n            type='text'\n            fullWidth\n            variant='standard'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder='John Smith'\n            onChange={handleInputChange}\n            value={name}\n          />\n          <TextField\n            margin='dense'\n            id={id + 'number'}\n            label='Phone Number'\n            name='number'\n            type='tel'\n            fullWidth\n            variant='standard'\n            pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n            title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n            required\n            placeholder='050-123-23-23'\n            onChange={handleInputChange}\n            value={number}\n          />\n        </DialogContent>\n        <DialogActions>\n          <LoadingButton startIcon={<EditIcon />} onClick={handleModalClose} name='edit' variant='contained' loading={isEditing}>Edit</LoadingButton>\n          <Button onClick={handleModalClose} variant='contained'>Cancel</Button>\n        </DialogActions>\n      </Dialog>}\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n    </>\n  );\n}\n","import Button from '@mui/material/Button';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport TableCell from '@mui/material/TableCell';\nimport { useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\n\nexport default function ContactsTableItem({ contact, handleEdit, handleDelete }) {\n  const isDeleting = useSelector(contactsSelectors.isDeleting);\n\n  return (\n    <>\n      <TableCell component='th' scope='row'>{contact.name}</TableCell>\n      <TableCell>{contact.number}</TableCell>\n      <TableCell align='right'>\n        <ButtonGroup variant='contained' aria-label='edit/delete contact button group'>\n          <Button startIcon={<EditIcon />} onClick={() => handleEdit(contact)}>Edit</Button>\n          <LoadingButton startIcon={<DeleteIcon />} onClick={() => handleDelete(contact.id, contact.name)} variant='contained' loading={isDeleting}>Delete</LoadingButton>\n        </ButtonGroup>\n      </TableCell>\n    </>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { deleteReduxContact } from 'redux/contacts/contactsSlice';\nimport { filterSelector } from 'redux/filter';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Paper from '@mui/material/Paper';\nimport Snackbar from '@mui/material/Snackbar';\nimport useSnackbar from 'hooks/useSnackbar';\nimport useContactForm from 'hooks/useContactForm';\nimport ContactModal from 'components/ContactModal';\nimport ContactsTableItem from 'components/ContactsTableItem';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.common.white,\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n  },\n  '&:last-child td, &:last-child th': {\n    border: 0,\n  },\n}));\n\nexport default function ContactsTable() {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [contact, setContact] = useState({});\n  const filter = useSelector(filterSelector);\n  const contacts = useSelector(contactsSelectors.contacts);\n  const filteredContacstList = useMemo(() =>\n    contacts\n      .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n      .sort((a, b) => a.name.localeCompare(b.name)\n    ), [contacts, filter]);\n  const dispatch = useDispatch();\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n  const { openModal, setOpenModal } = useContactForm();\n\n  const handleEdit = (contact) => {\n    setContact(contact);\n    setOpenModal(true);\n  };\n\n  const handleDelete = (id, name) => {\n    dispatch(contactsOperations.deleteContact(id));\n    dispatch(deleteReduxContact(id));\n    setMessage(`Contact ${name} is successfully deleted!`);\n    setOpen();\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 480 }} aria-label='contacts table' size='small'>\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Full Name</StyledTableCell>\n              <StyledTableCell>Phone Number</StyledTableCell>\n              <StyledTableCell align='right'>Edit/Delete contact</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredContacstList\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map(item => (\n                <StyledTableRow key={item.id}>\n                  <ContactsTableItem\n                    contact={item}\n                    handleEdit={handleEdit}\n                    handleDelete={handleDelete}\n                  />\n                </StyledTableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25, 50]}\n        component=\"div\"\n        count={filteredContacstList.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n      <ContactModal contactObj={contact} openModal={openModal} setOpenModal={setOpenModal} />\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\nimport Header from \"components/Header\";\nimport ContactForm from \"components/ContactForm\";\nimport Filter from \"components/Filter\";\nimport ContactsTable from 'components/ContactsTable';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {dispatch(contactsOperations.getAllContacts())});\n\n  return (\n    <>\n      <Header text='Phonebook contacts'/>\n      <ContactForm />\n      <Filter />\n      <ContactsTable />\n    </>\n  );\n}\n"],"names":["Header","text","className","styles","Notification","propTypes","PropTypes","useSnackbar","useState","snackbar","setSnackbar","open","setOpen","prevState","message","setMessage","handleClose","event","reason","useContactForm","name","setName","number","setNumber","id","useId","openModal","setOpenModal","handleInputChange","target","value","resetForm","ContactForm","dispatch","useDispatch","contacts","useSelector","contactsSelectors","isLoading","handleSubmit","preventDefault","find","contact","toLowerCase","contactsOperations","autoComplete","onSubmit","TextField","autoFocus","margin","label","type","variant","pattern","title","required","placeholder","onChange","LoadingButton","startIcon","Add","onClick","loading","Snackbar","autoHideDuration","onClose","Filter","filter","filterSelector","Box","sx","textAlign","marginBottom","DebounceInput","element","debounceTimeout","changeFilter","ContactModal","contactObj","isEditing","useEffect","handleModalClose","Dialog","DialogTitle","DialogContent","fullWidth","DialogActions","Edit","Button","ContactsTableItem","handleEdit","handleDelete","isDeleting","TableCell","component","scope","align","ButtonGroup","Delete","StyledTableCell","styled","theme","tableCellClasses","backgroundColor","palette","primary","dark","color","common","white","fontSize","StyledTableRow","TableRow","action","hover","border","ContactsTable","page","setPage","rowsPerPage","setRowsPerPage","setContact","filteredContacstList","useMemo","includes","sort","a","b","localeCompare","deleteReduxContact","TableContainer","Paper","Table","minWidth","size","TableHead","TableBody","slice","map","item","TablePagination","rowsPerPageOptions","count","length","onPageChange","newPage","onRowsPerPageChange","parseInt","ContactsPage"],"sourceRoot":""}