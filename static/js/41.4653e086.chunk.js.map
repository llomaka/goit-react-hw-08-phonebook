{"version":3,"file":"static/js/41.4653e086.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Header/Header.module.css?4e72","components/Header/Header.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/ContactsTable/ContactsTable.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Header_text__4jGdp\"};","import PropTypes from 'prop-types';\nimport styles from './Header.module.css';\n\nexport default function Header({ text }) {\n  return (\n    <h1 className={styles.text}>{text}</h1>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"fields\":\"ContactForm_fields__wtPPu\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState, useId } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelector } from 'redux/contacts';\nimport { toast } from 'react-toastify';\n// import ClipLoader from \"react-spinners/ClipLoader\";\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const id = useId();\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelector);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (contacts?.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      return toast.warning(`${name} is already in Contacts List!`);\n    }\n    dispatch(contactsOperations.createContact({ name, number }));\n    toast.info(`${name} is successfully added to Contacts List!`);\n    resetForm();\n  };\n\n  return (\n    <form\n      className={styles.form}\n      autoComplete='on'\n      onSubmit={handleSubmit}\n    >\n      <div className={styles.fields}>\n        <label\n          className={styles.label}\n          htmlFor={id + 'name'}>\n          Name *\n        </label>\n        <input\n          className={styles.input}\n          type='text'\n          name='name'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={id + 'name'}\n          placeholder='John Smith'\n          onChange={handleInputChange}\n          value={name}\n        />\n      </div>\n      <div className={styles.fields}>\n        <label\n          className={styles.label}\n          htmlFor={id + 'number'}>\n          Phone *\n        </label>\n        <input\n          className={styles.input}\n          type='tel'\n          name='number'\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n          required\n          id={id + 'number'}\n          placeholder='050-123-23-23'\n          onChange={handleInputChange}\n          value={number}\n        />\n      </div>\n      <button\n        className={styles.button}\n        type='submit'\n        name='submit_button'\n        // disabled={isLoading}\n      >\n        {/* {isLoading && <ClipLoader size={16} color='#fff' />} */}\n        <span>Add contact</span>\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Filter_header__6akjb\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { filterSelector } from 'redux/filter';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { DebounceInput } from 'react-debounce-input';\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  const onChange = event => dispatch(changeFilter(event.target.value));\n\n    return (\n      <>\n        <h2 className={styles.header}>Find contacts by name</h2>\n        <DebounceInput\n          element='input'\n          debounceTimeout={700}\n          className={styles.input}\n          type='text'\n          name='filter'\n          onChange={onChange}\n          value={filter}\n          />\n      </>\n    )\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactListItem_button__SG6H2\"};","// import ClipLoader from \"react-spinners/ClipLoader\";\nimport { toast } from 'react-toastify';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\nimport { deleteReduxContact } from 'redux/contacts/contactsSlice';\nimport PropTypes from 'prop-types';\nimport styles from './ContactListItem.module.css';\n\nexport default function ContactListItem({ contact }) {\n  const dispatch = useDispatch();\n  const { name, number, id } = contact;\n\n  const handleClick = (id, name) => {\n    dispatch(contactsOperations.deleteContact(id));\n    dispatch(deleteReduxContact(id));\n    toast.info(`Contact ${name} is successfully deleted!`);\n  };\n\n  return (\n    <>\n      <p>{name}: {number}</p>\n      <button\n        className={styles.button}\n        type='button'\n        onClick={() => handleClick(id, name)}\n        // disabled={isLoading}\n      >\n        {/* {isLoading && <ClipLoader size={16} color='#fff' />} */}\n        <span>Delete</span>\n      </button>\n    </>\n  );\n}\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\"};","import ContactListItem from 'components/ContactListItem';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { contactsSelector } from 'redux/contacts';\nimport { filterSelector } from 'redux/filter';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nexport default function ContactList() {\n  const contacts = useSelector(contactsSelector);\n  const filter = useSelector(filterSelector);\n  const contactsList = useMemo(() =>\n    contacts\n      .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n      .sort((a, b) => a.name.localeCompare(b.name)\n    ), [contacts, filter]);\n\n  return (\n    <ul>\n      {contactsList.map(contact =>\n      (<li\n        key={contact.id}\n        className={styles.item}\n      >\n        <ContactListItem contact={contact} />\n      </li>)\n      )}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  )\n};\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport {contactsSelector} from 'redux/contacts';\nimport {filterSelector} from 'redux/filter';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nexport default function ContactsTable() {\n  const filter = useSelector(filterSelector);\n  const contacts = useSelector(contactsSelector);\n  const filteredContacstList = useMemo(() =>\n    contacts\n      .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n      .sort((a, b) => a.name.localeCompare(b.name)\n    ), [contacts, filter]);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Full Name</TableCell>\n            <TableCell>Phone Number</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {filteredContacstList.map(contact => (\n            <TableRow\n              key={contact.id}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">{contact.name}</TableCell>\n              <TableCell>{contact.number}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import { useEffect } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\nimport Header from \"components/Header\";\nimport ContactForm from \"components/ContactForm\";\nimport Filter from \"components/Filter\";\nimport ContactList from \"components/ContactList\";\nimport ContactsTable from 'components/ContactsTable';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {dispatch(contactsOperations.getAllContacts())});\n\n  return (\n    <>\n      <Header text='Phonebook contacts'/>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n      <ContactsTable />\n    </>\n  );\n}\n"],"names":["Header","text","className","styles","Notification","propTypes","PropTypes","ContactForm","useState","name","setName","number","setNumber","id","useId","dispatch","useDispatch","contacts","useSelector","contactsSelector","handleInputChange","event","target","value","autoComplete","onSubmit","preventDefault","find","contact","toLowerCase","toast","contactsOperations","htmlFor","type","pattern","title","required","placeholder","onChange","Filter","filter","filterSelector","DebounceInput","element","debounceTimeout","changeFilter","ContactListItem","onClick","deleteReduxContact","handleClick","ContactList","contactsList","useMemo","includes","sort","a","b","localeCompare","map","ContactsTable","filteredContacstList","TableContainer","component","Paper","Table","sx","minWidth","TableHead","TableRow","TableCell","TableBody","border","scope","ContactsPage","useEffect"],"sourceRoot":""}