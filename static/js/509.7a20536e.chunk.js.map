{"version":3,"file":"static/js/509.7a20536e.chunk.js","mappings":"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","sources":["hooks/useSnackbar.js","hooks/useContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/StyledTableCell/StyledTableCell.js","components/StyledTableRow/StyledTableRow.js","components/ContactModal/ContactModal.jsx","components/ContactsTableItem/ContactsTableItem.jsx","components/ContactsTable/ContactsTable.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { useState } from 'react';\n\nexport default function useSnackbar() {\n  const [snackbar, setSnackbar] = useState({\n    'open': false,\n    'message': ''\n  });\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbar(prevState => {\n      return {\n        ...prevState,\n        'open': false,\n      }\n    });\n  };\n\n  const setOpen = () => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'open': true,\n    };\n  });\n\n  const setMessage = (message) => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'message': message,\n    }\n  })\n\n  return { open: snackbar.open, setOpen, message: snackbar.message, setMessage, handleClose };\n}\n","import { useState, useId } from 'react';\n\nexport default function useContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const id = useId();\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return { name, setName, number, setNumber, id, openModal, setOpenModal, handleInputChange, resetForm };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\"};","import useContactForm from 'hooks/useContactForm';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport TextField from '@mui/material/TextField';\nimport { Box } from '@mui/material';\nimport Snackbar from '@mui/material/Snackbar';\nimport useSnackbar from 'hooks/useSnackbar';\nimport AddIcon from '@mui/icons-material/Add';\nimport { usePostContactMutation, useGetAllContactsQuery } from 'service/contactsApi';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const { name, number, id, handleInputChange, resetForm } = useContactForm();\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n  const { data: contacts } = useGetAllContactsQuery();\n  const [postContact, { isLoading }] = usePostContactMutation();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (contacts?.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      setMessage(`${name} is already in Contacts List!`);\n      return setOpen();\n    }\n    postContact({ name, number });\n    setMessage(`${name} is successfully added to Contacts List!`);\n    setOpen();\n    resetForm();\n  };\n\n  return (\n    <>\n      <Box\n        component='form'\n        className={styles.form}\n        autoComplete='on'\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          autoFocus\n          margin='dense'\n          id={id + 'name'}\n          label='Full Name'\n          name='name'\n          type='text'\n          variant='standard'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder='John Smith'\n          onChange={handleInputChange}\n          value={name}\n        />\n        <TextField\n          margin='dense'\n          id={id + 'number'}\n          label='Phone Number'\n          name='number'\n          type='tel'\n          variant='standard'\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n          required\n          placeholder='050-123-23-23'\n          onChange={handleInputChange}\n          value={number}\n        />\n        <LoadingButton startIcon={<AddIcon />} type='submit' onClick={handleSubmit} name='submit_button' variant='contained' loading={isLoading}>Add contact</LoadingButton>\n      </Box>\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n    </>\n  );\n};\n","import TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport { styled } from '@mui/material/styles';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.common.white,\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n\nexport default StyledTableCell;\n","import { styled } from '@mui/material/styles';\nimport TableRow from '@mui/material/TableRow';\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n  },\n  '&:last-child td, &:last-child th': {\n    border: 0,\n  },\n}));\n\nexport default StyledTableRow;\n","import { useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport useContactForm from 'hooks/useContactForm';\nimport useSnackbar from 'hooks/useSnackbar';\nimport Snackbar from '@mui/material/Snackbar';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { useEditContactByIdMutation } from 'service/contactsApi';\nimport PropTypes from 'prop-types';\n\nexport default function ContactModal({ contactObj, openModal, setOpenModal }) {\n  const { name, setName, number, setNumber, id, handleInputChange, resetForm } = useContactForm();\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n  const [editContact, { isLoading }] = useEditContactByIdMutation();\n\n\n  useEffect(() => {\n    setName(contactObj.name);\n    setNumber(contactObj.number);\n  }, [contactObj, setName, setNumber]);\n\n  const handleModalClose = (event) => {\n    if (event.target.name !== 'edit') {\n      setOpenModal(false);\n      resetForm();\n      return;\n    }\n    if ((name.toLowerCase() === contactObj.name.toLowerCase()) && (number === contactObj.number)) {\n      setMessage(`Please make changes to contact ${name} information or press Cancel to exit Edit Contact dialog.`);\n      return setOpen();\n    }\n    editContact({ id: contactObj.id, name, number });\n    setMessage(`Contact ${name} information is successfully changed!`);\n    setOpen();\n    resetForm();\n    setOpenModal(false);\n};\n\n  return (\n    <>\n      {name && <Dialog open={openModal} onClose={handleModalClose}>\n        <DialogTitle>Contact Information</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin='dense'\n            id={id + 'name'}\n            label='Full Name'\n            name='name'\n            type='text'\n            fullWidth\n            variant='standard'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder='John Smith'\n            onChange={handleInputChange}\n            value={name}\n          />\n          <TextField\n            margin='dense'\n            id={id + 'number'}\n            label='Phone Number'\n            name='number'\n            type='tel'\n            fullWidth\n            variant='standard'\n            pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n            title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n            required\n            placeholder='050-123-23-23'\n            onChange={handleInputChange}\n            value={number}\n          />\n        </DialogContent>\n        <DialogActions>\n          <LoadingButton startIcon={<EditIcon />} onClick={handleModalClose} name='edit' variant='contained' loading={isLoading}>Edit</LoadingButton>\n          <Button onClick={handleModalClose} variant='contained'>Cancel</Button>\n        </DialogActions>\n      </Dialog>}\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n    </>\n  );\n}\n\nContactModal.propTypes = {\n  contactObj: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  openModal: PropTypes.bool.isRequired,\n  setOpenModal: PropTypes.func.isRequired\n};\n","import Button from '@mui/material/Button';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport TableCell from '@mui/material/TableCell';\nimport Typography from '@mui/material/Typography';\nimport { useDeleteContactByIdMutation } from 'service/contactsApi';\nimport PropTypes from 'prop-types';\n\nexport default function ContactsTableItem({ contact, handleEdit, handleDelete }) {\n  const [, { isLoading }] = useDeleteContactByIdMutation();\n\n  return (\n    <>\n      <TableCell component='th' scope='row'>\n        <Typography>\n          {contact.name}\n        </Typography>\n      </TableCell>\n      <TableCell>\n        <Typography>\n          {contact.number}\n        </Typography>\n      </TableCell>\n      <TableCell align='right'>\n        <ButtonGroup variant='contained' aria-label='edit/delete contact button group'>\n          <Button startIcon={<EditIcon />} onClick={() => handleEdit(contact)} variant='outlined'>Edit</Button>\n          <LoadingButton startIcon={<DeleteIcon />} onClick={() => handleDelete(contact.id, contact.name)} variant='contained' loading={isLoading}>Delete</LoadingButton>\n        </ButtonGroup>\n      </TableCell>\n    </>\n  );\n}\n\nContactsTableItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  handleEdit: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n","import { useMemo, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterSelector } from 'redux/filter';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport StyledTableCell from 'components/StyledTableCell';\nimport StyledTableRow from 'components/StyledTableRow';\nimport Paper from '@mui/material/Paper';\nimport Snackbar from '@mui/material/Snackbar';\nimport useSnackbar from 'hooks/useSnackbar';\nimport useContactForm from 'hooks/useContactForm';\nimport ContactModal from 'components/ContactModal';\nimport ContactsTableItem from 'components/ContactsTableItem';\nimport { useGetAllContactsQuery, useDeleteContactByIdMutation } from 'service/contactsApi';\nimport contactsApi from 'service/contactsApi';\n\nexport default function ContactsTable() {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [contact, setContact] = useState({});\n  const filter = useSelector(filterSelector);\n  const { data = [] } = useGetAllContactsQuery();\n  const filteredContactsList = useMemo(() =>\n    data\n      .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n      .sort((a, b) => a.name.localeCompare(b.name)\n    ), [data, filter]);\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n  const { openModal, setOpenModal } = useContactForm();\n  const [deleteContact] = useDeleteContactByIdMutation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsApi.util.resetApiState());\n  }, [dispatch]);\n\n  const handleEdit = (contact) => {\n    setContact(contact);\n    setOpenModal(true);\n  };\n\n  const handleDelete = (id, name) => {\n    deleteContact(id);\n    setMessage(`Contact ${name} is successfully deleted!`);\n    setOpen();\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 480 }} aria-label='contacts table' size='small'>\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Full Name</StyledTableCell>\n              <StyledTableCell>Phone Number</StyledTableCell>\n              <StyledTableCell align='right'>Edit/Delete Contact</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredContactsList\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map(item => (\n                <StyledTableRow key={item.id}>\n                  <ContactsTableItem\n                    contact={item}\n                    handleEdit={handleEdit}\n                    handleDelete={handleDelete}\n                  />\n                </StyledTableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25, 50]}\n        component=\"div\"\n        count={filteredContactsList.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n      <ContactModal contactObj={contact} openModal={openModal} setOpenModal={setOpenModal} />\n    </>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterSelector } from 'redux/filter';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { Typography, Box, TextField } from '@mui/material';\nimport debounce from 'lodash.debounce';\n\nexport default function Filter() {\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  const debouncedFilter = debounce((text) => dispatch(changeFilter(text)), 500);\n\n  const onChange = event => {\n    debouncedFilter(event.target.value);\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '10px',\n        textAlign: 'center',\n        marginBottom: '15px',\n      }}\n    >\n      <Typography>Find contact by name</Typography>\n      <TextField\n        variant='standard'\n        type='text'\n        name='filter'\n        onChange={onChange}\n        value={filter}\n      />\n    </Box>\n  );\n}\n","import ContactForm from \"components/ContactForm\";\nimport ContactsTable from 'components/ContactsTable';\nimport Typography from '@mui/material/Typography';\nimport Filter from 'components/Filter';\n\nexport default function ContactsPage() {\n  return (\n    <>\n      <Typography variant='h3' component='h1' align='center' gutterBottom mt={2}>Phonebook contacts</Typography>\n      <ContactForm />\n      <Filter />\n      <ContactsTable />\n    </>\n  );\n}\n"],"names":["useSnackbar","useState","snackbar","setSnackbar","open","setOpen","prevState","message","setMessage","handleClose","event","reason","useContactForm","name","setName","number","setNumber","id","useId","openModal","setOpenModal","handleInputChange","target","value","resetForm","ContactForm","contacts","useGetAllContactsQuery","data","usePostContactMutation","postContact","isLoading","handleSubmit","preventDefault","find","contact","toLowerCase","Box","component","className","styles","autoComplete","onSubmit","TextField","autoFocus","margin","label","type","variant","pattern","title","required","placeholder","onChange","LoadingButton","startIcon","Add","onClick","loading","Snackbar","autoHideDuration","onClose","styled","TableCell","theme","tableCellClasses","backgroundColor","palette","primary","dark","color","common","white","fontSize","TableRow","action","hover","border","ContactModal","contactObj","useEditContactByIdMutation","editContact","useEffect","handleModalClose","Dialog","DialogTitle","DialogContent","fullWidth","DialogActions","Edit","Button","ContactsTableItem","handleEdit","handleDelete","useDeleteContactByIdMutation","scope","Typography","align","ButtonGroup","Delete","ContactsTable","page","setPage","rowsPerPage","setRowsPerPage","setContact","filter","useSelector","filterSelector","filteredContactsList","useMemo","includes","sort","a","b","localeCompare","deleteContact","dispatch","useDispatch","contactsApi","TableContainer","Paper","Table","sx","minWidth","size","TableHead","TableBody","slice","map","item","TablePagination","rowsPerPageOptions","count","length","onPageChange","newPage","onRowsPerPageChange","parseInt","Filter","debouncedFilter","debounce","text","changeFilter","display","justifyContent","alignItems","gap","textAlign","marginBottom","ContactsPage","gutterBottom","mt"],"sourceRoot":""}