{"version":3,"file":"static/js/649.14b322cc.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Header/Header.module.css?4e72","components/Header/Header.jsx","hooks/useContactForm.js","hooks/useSnackbar.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/ContactModal/ContactModal.jsx","components/ContactsTable/ContactsTable.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Header_text__4jGdp\"};","import PropTypes from 'prop-types';\nimport styles from './Header.module.css';\n\nexport default function Header({ text }) {\n  return (\n    <h1 className={styles.text}>{text}</h1>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import { useState, useId } from 'react';\n\nexport default function useContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const id = useId();\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return { name, setName, number, setNumber, id, openModal, setOpenModal, handleInputChange, resetForm };\n}\n","import { useState } from 'react';\n\nexport default function useSnackbar() {\n  const [snackbar, setSnackbar] = useState({\n    'open': false,\n    'message': ''\n  });\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbar(prevState => {\n      return {\n        ...prevState,\n        'open': false,\n      }\n    });\n  };\n\n  const setOpen = () => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'open': true,\n    };\n  });\n\n  const setMessage = (message) => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'message': message,\n    }\n  })\n\n  return { open: snackbar.open, setOpen, message: snackbar.message, setMessage, handleClose };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"fields\":\"ContactForm_fields__wtPPu\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import useContactForm from 'hooks/useContactForm';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Snackbar from '@mui/material/Snackbar';\nimport useSnackbar from 'hooks/useSnackbar';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const { name, number, id, handleInputChange, resetForm } = useContactForm();\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.contacts);\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (contacts?.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      setMessage(`${name} is already in Contacts List!`);\n      return setOpen();\n    }\n    dispatch(contactsOperations.createContact({ name, number }));\n    setMessage(`${name} is successfully added to Contacts List!`);\n    setOpen();\n    resetForm();\n  };\n\n  return (\n    <form\n      className={styles.form}\n      autoComplete='on'\n      onSubmit={handleSubmit}\n    >\n      <div className={styles.fields}>\n        <label\n          className={styles.label}\n          htmlFor={id + 'name'}>\n          Name *\n        </label>\n        <input\n          className={styles.input}\n          type='text'\n          name='name'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={id + 'name'}\n          placeholder='John Smith'\n          onChange={handleInputChange}\n          value={name}\n        />\n      </div>\n      <div className={styles.fields}>\n        <label\n          className={styles.label}\n          htmlFor={id + 'number'}>\n          Phone *\n        </label>\n        <input\n          className={styles.input}\n          type='tel'\n          name='number'\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n          required\n          id={id + 'number'}\n          placeholder='050-123-23-23'\n          onChange={handleInputChange}\n          value={number}\n        />\n      </div>\n      <button\n        className={styles.button}\n        type='submit'\n        name='submit_button'\n        // disabled={isLoading}\n      >\n        {/* {isLoading && <ClipLoader size={16} color='#fff' />} */}\n        <span>Add contact</span>\n      </button>\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Filter_header__6akjb\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { filterSelector } from 'redux/filter';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { DebounceInput } from 'react-debounce-input';\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  const onChange = event => dispatch(changeFilter(event.target.value));\n\n    return (\n      <>\n        <h2 className={styles.header}>Find contact by name</h2>\n        <DebounceInput\n          element='input'\n          debounceTimeout={700}\n          className={styles.input}\n          type='text'\n          name='filter'\n          onChange={onChange}\n          value={filter}\n          />\n      </>\n    )\n};\n\n","import { useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport useContactForm from 'hooks/useContactForm';\n\nexport default function ContactModal({ contactObj, openModal, handleModalClose, setOpenModal }) {\n  const { name, setName, number, setNumber, id, handleInputChange } = useContactForm();\n\n  useEffect(() => {\n    setName(contactObj.name);\n    setNumber(contactObj.number);\n  }, [contactObj, setName, setNumber]);\n\n  // const handleEdit = (contactObj) => {\n  //   if ((name.toLowerCase() === contactObj.name.toLowerCase()) && (number === contactObj.number)) {\n  //     setMessage(`Please make changes to contact ${name} information or press Cancel to exit Edit Contact dialog.`);\n  //     return setOpen();\n  //   }\n  //   dispatch(contactsOperations.editContact(contactObj.id, name, number));\n  //   setMessage(`Contact ${name} information is successfully changed!`);\n  //   setOpen();\n  //   resetForm();\n  // };\n\n  const handleClose = () => {\n    setOpenModal(false);\n    // handleModalClose();\n  };\n\n  return (\n    <div>\n      <Dialog open={openModal} onClose={handleClose}>\n        <DialogTitle>Contact Information</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin='dense'\n            id={id + 'name'}\n            label='Full Name'\n            type='text'\n            fullWidth\n            variant='standard'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder='John Smith'\n            onChange={handleInputChange}\n            value={name}\n          />\n          <TextField\n            margin='dense'\n            id={id + 'number'}\n            label='Phone Number'\n            type='tel'\n            fullWidth\n            variant='standard'\n            pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n            title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n            required\n            placeholder='050-123-23-23'\n            onChange={handleInputChange}\n            value={number}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Edit</Button>\n          <Button onClick={handleClose}>Cancel</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport { contactsOperations } from 'redux/contacts';\nimport { deleteReduxContact } from 'redux/contacts/contactsSlice';\nimport { filterSelector } from 'redux/filter';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Snackbar from '@mui/material/Snackbar';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport useSnackbar from 'hooks/useSnackbar';\nimport useContactForm from 'hooks/useContactForm';\nimport ContactModal from 'components/ContactModal';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.common.white,\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n  },\n  '&:last-child td, &:last-child th': {\n    border: 0,\n  },\n}));\n\nexport default function ContactsTable() {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const filter = useSelector(filterSelector);\n  const contacts = useSelector(contactsSelectors.contacts);\n  const filteredContacstList = useMemo(() =>\n    contacts\n      .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n      .sort((a, b) => a.name.localeCompare(b.name)\n    ), [contacts, filter]);\n  const dispatch = useDispatch();\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n  const { openModal, setOpenModal } = useContactForm();\n\n  const handleEdit = () => {\n    setOpenModal(true);\n  };\n\n  function handleModalClose() {\n    setOpenModal(false);\n  };\n\n  const handleDelete = (id, name) => {\n    dispatch(contactsOperations.deleteContact(id));\n    dispatch(deleteReduxContact(id));\n    setMessage(`Contact ${name} is successfully deleted!`);\n    setOpen();\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 480 }} aria-label='contacts table' size='small'>\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Full Name</StyledTableCell>\n              <StyledTableCell>Phone Number</StyledTableCell>\n              <StyledTableCell align='right'>Edit/Delete contact</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredContacstList\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map(contact => (\n                <StyledTableRow key={contact.id}>\n                  <TableCell component='th' scope='row'>{contact.name}</TableCell>\n                  <TableCell>{contact.number}</TableCell>\n                  <TableCell align='right'>\n                    <ButtonGroup variant='contained' aria-label='edit/delete contact button group'>\n                      <Button startIcon={<EditIcon />} onClick={() => handleEdit(contact)}>Edit</Button>\n                      <Button startIcon={<DeleteIcon />} onClick={() => handleDelete(contact.id, contact.name)}>Delete</Button>\n                    </ButtonGroup>\n                    <ContactModal contactObj={contact} openModal={openModal} setOpenModal={setOpenModal} handleClose={handleModalClose} />\n                  </TableCell>\n                </StyledTableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25, 50]}\n        component=\"div\"\n        count={filteredContacstList.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\nimport Header from \"components/Header\";\nimport ContactForm from \"components/ContactForm\";\nimport Filter from \"components/Filter\";\nimport ContactsTable from 'components/ContactsTable';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {dispatch(contactsOperations.getAllContacts())});\n\n  return (\n    <>\n      <Header text='Phonebook contacts'/>\n      <ContactForm />\n      <Filter />\n      <ContactsTable />\n    </>\n  );\n}\n"],"names":["Header","text","className","styles","Notification","propTypes","PropTypes","useContactForm","useState","name","setName","number","setNumber","id","useId","openModal","setOpenModal","handleInputChange","event","target","value","resetForm","useSnackbar","snackbar","setSnackbar","open","setOpen","prevState","message","setMessage","handleClose","reason","ContactForm","dispatch","useDispatch","contacts","useSelector","contactsSelectors","autoComplete","onSubmit","preventDefault","find","contact","toLowerCase","contactsOperations","htmlFor","type","pattern","title","required","placeholder","onChange","Snackbar","autoHideDuration","onClose","Filter","filter","filterSelector","DebounceInput","element","debounceTimeout","changeFilter","ContactModal","contactObj","handleModalClose","useEffect","Dialog","DialogTitle","DialogContent","TextField","autoFocus","margin","label","fullWidth","variant","DialogActions","Button","onClick","StyledTableCell","styled","TableCell","theme","tableCellClasses","backgroundColor","palette","primary","dark","color","common","white","fontSize","StyledTableRow","TableRow","action","hover","border","ContactsTable","page","setPage","rowsPerPage","setRowsPerPage","filteredContacstList","useMemo","includes","sort","a","b","localeCompare","TableContainer","component","Paper","Table","sx","minWidth","size","TableHead","align","TableBody","slice","map","scope","ButtonGroup","startIcon","Edit","Delete","deleteReduxContact","TablePagination","rowsPerPageOptions","count","length","onPageChange","newPage","onRowsPerPageChange","parseInt","ContactsPage"],"sourceRoot":""}