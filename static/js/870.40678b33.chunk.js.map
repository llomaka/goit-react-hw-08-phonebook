{"version":3,"file":"static/js/870.40678b33.chunk.js","mappings":"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","sources":["hooks/useSnackbar.js","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { useState } from 'react';\n\nexport default function useSnackbar() {\n  const [snackbar, setSnackbar] = useState({\n    'open': false,\n    'message': ''\n  });\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbar(prevState => {\n      return {\n        ...prevState,\n        'open': false,\n      }\n    });\n  };\n\n  const setOpen = () => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'open': true,\n    };\n  });\n\n  const setMessage = (message) => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'message': message,\n    }\n  })\n\n  return { open: snackbar.open, setOpen, message: snackbar.message, setMessage, handleClose };\n}\n","import { useState, useId } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { authOperations } from 'redux/authorization';\nimport useSnackbar from 'hooks/useSnackbar';\nimport Snackbar from '@mui/material/Snackbar';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme();\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const id = useId();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'email') {\n      setEmail(value);\n    } else if (name === 'password') {\n      setPassword(value);\n    }\n  };\n\n  const resetForm = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    dispatch(authOperations.loginUser({ email, password }));\n    setMessage(`User with ${email} is successfully logged in!`);\n    setOpen();\n    resetForm();\n    navigate('/contacts');\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <Container component=\"main\" maxWidth=\"xs\">\n          <Box\n            sx={{\n              marginTop: 8,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h2\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                label=\"Email Address\"\n                autoComplete=\"email\"\n                autoFocus\n                type='email'\n                name='email'\n                title='Email address'\n                id={id + 'email'}\n                placeholder='olomaka@gmail.com'\n                onChange={handleInputChange}\n                value={email}\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                label=\"Password\"\n                autoComplete=\"current-password\"\n                type='password'\n                name='password'\n                minLength={8}\n                title='Password must be longer, than 8 characters, contain at least one number and one uppercase character, not contain spaces and parentheses'\n                id={id + 'password'}\n                placeholder='pa$sw0rD'\n                onChange={handleInputChange}\n                value={password}\n              />\n              <Button\n                onClick={handleSubmit}\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Sign In\n              </Button>\n              <Grid container justifyContent=\"flex-end\">\n                <Grid item>\n                  <Link href=\"/goit-react-hw-08-phonebook/register\" variant=\"body2\">\n                    Don't have an account? Sign Up\n                  </Link>\n                </Grid>\n              </Grid>\n            </Box>\n          </Box>\n        </Container>\n        <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n      </ThemeProvider>\n    </>\n  );\n};\n","import LoginForm from \"components/LoginForm\";\n\nexport default function LoginPage() {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["useSnackbar","useState","snackbar","setSnackbar","open","setOpen","prevState","message","setMessage","handleClose","event","reason","theme","createTheme","LoginForm","email","setEmail","password","setPassword","id","useId","dispatch","useDispatch","navigate","useNavigate","handleInputChange","target","name","value","handleSubmit","preventDefault","authOperations","ThemeProvider","Container","component","maxWidth","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","onSubmit","noValidate","mt","TextField","margin","required","fullWidth","label","autoComplete","autoFocus","type","title","placeholder","onChange","minLength","Button","onClick","mb","Grid","container","justifyContent","item","Link","href","Snackbar","autoHideDuration","onClose","LoginPage"],"sourceRoot":""}