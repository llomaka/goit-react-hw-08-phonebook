{"version":3,"file":"static/js/359.784a432a.chunk.js","mappings":"oMACA,EAAuB,qB,UCER,SAASA,EAAT,GAA2B,IAATC,EAAQ,EAARA,KAC/B,OACE,eAAIC,UAAWC,EAAf,SAA6BF,IAIjCG,aAAaC,UAAY,CACvBJ,KAAMK,IAAAA,OAAAA,a,sFCRO,SAASC,IACtB,OAAgCC,EAAAA,EAAAA,UAAS,CACvC,MAAQ,EACR,QAAW,KAFb,eAAOC,EAAP,KAAiBC,EAAjB,KA+BA,MAAO,CAAEC,KAAMF,EAASE,KAAMC,QAdd,kBAAMF,GAAY,SAAAG,GAChC,OAAO,kBACFA,GADL,IAEE,MAAQ,QAW2BC,QAASL,EAASK,QAASC,WAP/C,SAACD,GAAD,OAAaJ,GAAY,SAAAG,GAC1C,OAAO,kBACFA,GADL,IAEE,QAAWC,QAI+DE,YA1B1D,SAACC,EAAOC,GACX,cAAXA,GAGJR,GAAY,SAAAG,GACV,OAAO,kBACFA,GADL,IAEE,MAAQ,W,kLCdhB,EAAuB,wBAAvB,EAAwD,0BAAxD,EAA0F,yBAA1F,EAA2H,yBAA3H,EAA6J,0B,UCO9I,SAASM,IACtB,OAA0BX,EAAAA,EAAAA,UAAS,IAAnC,eAAOY,EAAP,KAAcC,EAAd,KACA,GAAgCb,EAAAA,EAAAA,UAAS,IAAzC,eAAOc,EAAP,KAAiBC,EAAjB,KACMC,GAAKC,EAAAA,EAAAA,SACLC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,GAA4DtB,EAAAA,EAAAA,KAApDI,EAAR,EAAQA,KAAMG,EAAd,EAAcA,QAASF,EAAvB,EAAuBA,QAASG,EAAhC,EAAgCA,WAAYC,EAA5C,EAA4CA,YAEtCc,EAAoB,SAAAb,GACxB,MAAwBA,EAAMc,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACD,UAATD,EACFX,EAASY,GACS,aAATD,GACTT,EAAYU,IASVC,EAAY,mCAAG,WAAOjB,GAAP,iEACnBA,EAAMkB,iBACNT,EAASU,EAAAA,GAAAA,UAAyB,CAAEhB,MAAAA,EAAOE,SAAAA,KAC3CP,EAAW,aAAD,OAAcK,EAAd,gCACVR,IARAS,EAAS,IACTE,EAAY,IASZK,EAAS,aANU,2CAAH,sDASlB,OACE,iCACE,kBACE1B,UAAWC,EACXkC,aAAa,KACbC,SAAUJ,EAHZ,WAKE,iBAAKhC,UAAWC,EAAhB,WACE,kBACED,UAAWC,EACXoC,QAASf,EAAK,QAFhB,sBAKA,kBACEtB,UAAWC,EACXqC,KAAK,QACLR,KAAK,QACLS,MAAM,gBACNC,UAAQ,EACRlB,GAAIA,EAAK,QACTmB,YAAY,oBACZC,SAAUd,EACVG,MAAOb,QAGX,iBAAKlB,UAAWC,EAAhB,WACE,kBACED,UAAWC,EACXoC,QAASf,EAAK,WAFhB,yBAKA,kBACEtB,UAAWC,EACXqC,KAAK,WACLR,KAAK,WACLa,UAAW,EACXJ,MAAM,0IACNC,UAAQ,EACRlB,GAAIA,EAAK,WACTmB,YAAY,WACZC,SAAUd,EACVG,MAAOX,QAGX,mBACEpB,UAAWC,EACXqC,KAAK,SACLR,KAAK,gBAHP,yBAWF,SAACc,EAAA,EAAD,CAAUC,iBAAkB,IAAMpC,KAAMA,EAAMqC,QAAShC,EAAaF,QAASA,OC3FpE,SAASmC,IACtB,OACE,iCACE,SAACjD,EAAA,EAAD,CAAQC,KAAK,6BACb,SAACkB,EAAD","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Header/Header.module.css?4e72","components/Header/Header.jsx","hooks/useSnackbar.js","webpack://goit-react-hw-08-phonebook/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Header_text__4jGdp\"};","import PropTypes from 'prop-types';\nimport styles from './Header.module.css';\n\nexport default function Header({ text }) {\n  return (\n    <h1 className={styles.text}>{text}</h1>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\n\nexport default function useSnackbar() {\n  const [snackbar, setSnackbar] = useState({\n    'open': false,\n    'message': ''\n  });\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbar(prevState => {\n      return {\n        ...prevState,\n        'open': false,\n      }\n    });\n  };\n\n  const setOpen = () => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'open': true,\n    };\n  });\n\n  const setMessage = (message) => setSnackbar(prevState => {\n    return {\n      ...prevState,\n      'message': message,\n    }\n  })\n\n  return { open: snackbar.open, setOpen, message: snackbar.message, setMessage, handleClose };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"fields\":\"LoginForm_fields__ZPX58\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"button\":\"LoginForm_button__LodJg\"};","import { useState, useId } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { authOperations } from 'redux/authorization';\nimport useSnackbar from 'hooks/useSnackbar';\nimport Snackbar from '@mui/material/Snackbar';\nimport styles from './LoginForm.module.css';\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const id = useId();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { open, message, setOpen, setMessage, handleClose } = useSnackbar();\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'email') {\n      setEmail(value);\n    } else if (name === 'password') {\n      setPassword(value);\n    }\n  };\n\n  const resetForm = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    dispatch(authOperations.loginUser({ email, password }));\n    setMessage(`User with ${email} is successfully logged in!`);\n    setOpen();\n    resetForm();\n    navigate('/contacts');\n  };\n\n  return (\n    <>\n      <form\n        className={styles.form}\n        autoComplete='on'\n        onSubmit={handleSubmit}\n      >\n        <div className={styles.fields}>\n          <label\n            className={styles.label}\n            htmlFor={id + 'email'}>\n            Email *\n          </label>\n          <input\n            className={styles.input}\n            type='email'\n            name='email'\n            title='Email address'\n            required\n            id={id + 'email'}\n            placeholder='olomaka@gmail.com'\n            onChange={handleInputChange}\n            value={email}\n          />\n        </div>\n        <div className={styles.fields}>\n          <label\n            className={styles.label}\n            htmlFor={id + 'password'}>\n            Password *\n          </label>\n          <input\n            className={styles.input}\n            type='password'\n            name='password'\n            minLength={8}\n            title='Password must be longer, than 8 characters, contain at least one number and one uppercase character, not contain spaces and parentheses'\n            required\n            id={id + 'password'}\n            placeholder='pa$sw0rD'\n            onChange={handleInputChange}\n            value={password}\n          />\n        </div>\n        <button\n          className={styles.button}\n          type='submit'\n          name='submit_button'\n          // disabled={isLoading}\n        >\n          {/* {isLoading && <ClipLoader size={16} color='#fff' />} */}\n          {/* {!isLoading && <span>Register</span>} */}\n          Sign In\n        </button>\n      </form>\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n    </>\n  );\n};\n","import Header from \"components/Header\";\nimport LoginForm from \"components/LoginForm\";\n\nexport default function LoginPage() {\n  return (\n    <>\n      <Header text='Enter Login Credentials'/>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["Header","text","className","styles","Notification","propTypes","PropTypes","useSnackbar","useState","snackbar","setSnackbar","open","setOpen","prevState","message","setMessage","handleClose","event","reason","LoginForm","email","setEmail","password","setPassword","id","useId","dispatch","useDispatch","navigate","useNavigate","handleInputChange","target","name","value","handleSubmit","preventDefault","authOperations","autoComplete","onSubmit","htmlFor","type","title","required","placeholder","onChange","minLength","Snackbar","autoHideDuration","onClose","LoginPage"],"sourceRoot":""}