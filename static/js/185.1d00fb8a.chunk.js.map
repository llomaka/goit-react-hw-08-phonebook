{"version":3,"file":"static/js/185.1d00fb8a.chunk.js","mappings":"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","sources":["hooks/useContactForm.js","hooks/useSnackbar.js","components/ContactForm/ContactForm.jsx","components/StyledTableCell/StyledTableCell.js","components/StyledTableRow/StyledTableRow.js","components/ContactModal/ContactModal.jsx","components/ContactsTableItem/ContactsTableItem.jsx","components/ContactsTable/ContactsTable.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { useState, useId } from 'react';\n\nexport default function useContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const id = useId();\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return { name, setName, number, setNumber, id, openModal, setOpenModal, handleInputChange, resetForm };\n}\n","import { useState } from 'react';\n\nexport default function useSnackbar() {\n  const [snackbar, setSnackbar] = useState({\n    'open': false,\n    'message': ''\n  });\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbar(prevState => {\n      return {\n        ...prevState,\n        'open': false,\n      }\n    });\n  };\n\n  const setMessage = (message) => setSnackbar(prevState => {\n    return {\n      'open': true,\n      'message': message,\n    }\n  })\n\n  return { open: snackbar.open, message: snackbar.message, setMessage, handleClose };\n}\n","import useContactForm from 'hooks/useContactForm';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Box, TextField, Snackbar } from '@mui/material';\nimport useSnackbar from 'hooks/useSnackbar';\nimport AddIcon from '@mui/icons-material/Add';\nimport { usePostContactMutation, useGetAllContactsQuery } from 'service/contactsApi';\nimport { useEffect } from 'react';\n\nexport default function ContactForm() {\n  const { name, number, id, handleInputChange, resetForm } = useContactForm();\n  const { open, message, setMessage, handleClose } = useSnackbar();\n  const { data: contacts } = useGetAllContactsQuery();\n  const [postContact, { isLoading, isSuccess }] = usePostContactMutation();\n\n  useEffect(() => {\n    if (isSuccess && name !== '') {\n      setMessage(`${name} is successfully added to Contacts List!`);\n      resetForm();\n    }\n  }, [isSuccess, name, resetForm, setMessage]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (contacts?.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      return setMessage(`${name} is already in Contacts List!`);\n    }\n    if (name === '' && number === '') {\n      return setMessage('Please enter values into Name and Number fields!');\n    }\n    postContact({ name, number });\n  };\n\n  return (\n    <>\n      <Box\n        component='form'\n        autoComplete='on'\n        onSubmit={handleSubmit}\n        sx={{ display: 'flex', justifyContent: 'center', flexDirection: { xs: 'column', md: 'row' }, gap: { xs: '10px', md: '20px' }, alignItems: { xs: 'normal', md: 'flex-end' }, marginBottom: '30px' }}\n      >\n        <TextField\n          autoFocus\n          margin='dense'\n          id={id + 'name'}\n          label='Full Name'\n          name='name'\n          type='text'\n          variant='standard'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder='John Smith'\n          onChange={handleInputChange}\n          value={name}\n        />\n        <TextField\n          margin='dense'\n          id={id + 'number'}\n          label='Phone Number'\n          name='number'\n          type='tel'\n          variant='standard'\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n          required\n          placeholder='050-123-23-23'\n          onChange={handleInputChange}\n          value={number}\n        />\n        <LoadingButton sx={{ display: { xs: 'none', md: 'flex' } }} startIcon={<AddIcon />} type='submit' onClick={handleSubmit} name='submit_button' variant='contained' loading={isLoading}>Add contact</LoadingButton>\n        <LoadingButton sx={{ display: { xs: 'block', md: 'none' }, lineHeight: '0', }} type='submit' onClick={handleSubmit} name='submit_button' variant='contained' loading={isLoading}><AddIcon /></LoadingButton>\n      </Box>\n      <Snackbar autoHideDuration={3000} open={open} onClose={handleClose} message={message} />\n    </>\n  );\n};\n","import TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport { styled } from '@mui/material/styles';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.common.white,\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n\nexport default StyledTableCell;\n","import { styled } from '@mui/material/styles';\nimport TableRow from '@mui/material/TableRow';\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n  },\n  '&:last-child td, &:last-child th': {\n    border: 0,\n  },\n}));\n\nexport default StyledTableRow;\n","import { useEffect } from 'react';\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle, Snackbar } from '@mui/material';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport useContactForm from 'hooks/useContactForm';\nimport useSnackbar from 'hooks/useSnackbar';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { useEditContactByIdMutation, useGetAllContactsQuery } from 'service/contactsApi';\nimport PropTypes from 'prop-types';\n\nexport default function ContactModal({ contactObj, openModal, setOpenModal }) {\n  const { name, setName, number, setNumber, id, handleInputChange, resetForm } = useContactForm();\n  const { data: contacts } = useGetAllContactsQuery();\n  const { open, message, setMessage, handleClose } = useSnackbar();\n  const [editContact, { isLoading, isSuccess }] = useEditContactByIdMutation();\n\n  useEffect(() => {\n    setName(contactObj.name);\n    setNumber(contactObj.number);\n  }, [contactObj, setName, setNumber]);\n\n  useEffect(() => {\n    if (isSuccess && name !== '') {\n      setMessage(`Contact ${name} information is successfully changed!`);\n      resetForm();\n      setOpenModal(false);\n    }\n  }, [isSuccess, name, resetForm, setMessage, setOpenModal]);\n\n  const handleModalClose = (event) => {\n    if (event.target.name !== 'edit') {\n      setOpenModal(false);\n      resetForm();\n      return;\n    }\n    if ((name.toLowerCase() === contactObj.name.toLowerCase()) && (number === contactObj.number)) {\n      return setMessage(`Please make changes to contact ${name} information or press Cancel to exit Edit Contact dialog.`);\n    }\n    if (contacts?.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      return setMessage(`${name} is already in Contacts List!`);\n    }\n    if (name === '' && number === '') {\n      return setMessage('Please enter values into Name and Number fields!');\n    }\n    editContact({ id: contactObj.id, name, number });\n};\n\n  return (\n    <>\n      {name && <Dialog open={openModal} onClose={handleModalClose}>\n        <DialogTitle>Contact Information</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin='dense'\n            id={id + 'name'}\n            label='Full Name'\n            name='name'\n            type='text'\n            fullWidth\n            variant='standard'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder='John Smith'\n            onChange={handleInputChange}\n            value={name}\n          />\n          <TextField\n            margin='dense'\n            id={id + 'number'}\n            label='Phone Number'\n            name='number'\n            type='tel'\n            fullWidth\n            variant='standard'\n            pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n            title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n            required\n            placeholder='050-123-23-23'\n            onChange={handleInputChange}\n            value={number}\n          />\n        </DialogContent>\n        <DialogActions>\n          <LoadingButton startIcon={<EditIcon />} onClick={handleModalClose} name='edit' variant='contained' loading={isLoading}>Edit</LoadingButton>\n          <Button onClick={handleModalClose} variant='contained'>Cancel</Button>\n        </DialogActions>\n      </Dialog>}\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n    </>\n  );\n}\n\nContactModal.propTypes = {\n  contactObj: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  openModal: PropTypes.bool.isRequired,\n  setOpenModal: PropTypes.func.isRequired\n};\n","import { Button, ButtonGroup, TableCell, Typography } from '@mui/material';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { useDeleteContactByIdMutation } from 'service/contactsApi';\nimport PropTypes from 'prop-types';\n\nexport default function ContactsTableItem({ contact, handleEdit, handleDelete }) {\n  const [, { isLoading }] = useDeleteContactByIdMutation();\n\n  return (\n    <>\n      <TableCell component='th' scope='row'>\n        <Typography>\n          {contact.name}\n        </Typography>\n      </TableCell>\n      <TableCell>\n        <Typography>\n          {contact.number}\n        </Typography>\n      </TableCell>\n      <TableCell align='right'>\n        <ButtonGroup variant='contained' aria-label='edit/delete contact button group'>\n          <Button startIcon={<EditIcon />} onClick={() => handleEdit(contact)} variant='outlined'>Edit</Button>\n          <LoadingButton startIcon={<DeleteIcon />} onClick={() => handleDelete(contact.id, contact.name)} variant='contained' loading={isLoading}>Delete</LoadingButton>\n        </ButtonGroup>\n      </TableCell>\n    </>\n  );\n}\n\nContactsTableItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  handleEdit: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired\n};\n","import { useMemo, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterSelector } from 'redux/filter';\nimport { Table, TableBody, TableContainer, TableHead, TableRow, TablePagination, Paper, Snackbar, List, ListItem, ListItemText, Pagination, ButtonGroup, Button, Box } from '@mui/material';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport StyledTableCell from 'components/StyledTableCell';\nimport StyledTableRow from 'components/StyledTableRow';\nimport useSnackbar from 'hooks/useSnackbar';\nimport useContactForm from 'hooks/useContactForm';\nimport ContactModal from 'components/ContactModal';\nimport ContactsTableItem from 'components/ContactsTableItem';\nimport contactsApi, { useGetAllContactsQuery, useDeleteContactByIdMutation } from 'service/contactsApi';\n\nexport default function ContactsTable() {\n  const [page, setPage] = useState(0);\n  const [listPage, setListPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [contact, setContact] = useState({});\n  const [deletedContact, setDeletedContact] = useState('');\n  const filter = useSelector(filterSelector);\n  const { data = [] } = useGetAllContactsQuery();\n  const filteredContactsList = useMemo(() =>\n    data\n      .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n      .sort((a, b) => a.name.localeCompare(b.name)\n  ), [data, filter]);\n  const { open, message, setMessage, handleClose } = useSnackbar();\n  const { openModal, setOpenModal } = useContactForm();\n  const [deleteContact, { isLoading, isSuccess, reset }] = useDeleteContactByIdMutation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsApi.util.resetApiState());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isSuccess && deletedContact !== '') {\n      setMessage(`Contact ${deletedContact} is successfully deleted!`);\n      setDeletedContact('');\n      reset();\n    }\n  },[isSuccess, setMessage, reset, setDeletedContact, deletedContact]);\n\n  const handleEdit = (contact) => {\n    setContact(contact);\n    setOpenModal(true);\n  };\n\n  const handleDelete = (contactId, contactName) => {\n    deleteContact(contactId);\n    setDeletedContact(contactName);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeListPage = (event, newPage) => {\n    setListPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <>\n      <TableContainer component={Paper} sx={{ display: { xs: 'none', md: 'block' } }}>\n        <Table sx={{ minWidth: 480 }} aria-label='contacts table' size='small'>\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Full Name</StyledTableCell>\n              <StyledTableCell>Phone Number</StyledTableCell>\n              <StyledTableCell align='right'>Edit/Delete Contact</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredContactsList\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map(item => (\n                <StyledTableRow key={item.id}>\n                  <ContactsTableItem\n                    contact={item}\n                    handleEdit={handleEdit}\n                    handleDelete={handleDelete}\n                  />\n                </StyledTableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25, 50]}\n        component='div'\n        count={filteredContactsList.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n        sx={{ display: { xs: 'none', md: 'block' } }}\n      />\n      <List sx={{ display: { xs: 'block', md: 'none' } }}>\n        {filteredContactsList\n          .slice((listPage-1) * 10, (listPage-1) * 10 + 10)\n          .map(item => (\n            <ListItem key={item.id}>\n              <ListItemText>\n                {item.name}: {item.number}\n              </ListItemText>\n              <ButtonGroup variant='contained' aria-label='edit/delete contact button group'>\n                <Button onClick={() => handleEdit(item)} variant='outlined'><EditIcon /></Button>\n                <LoadingButton onClick={() => handleDelete(item.id, item.name)} variant='contained' loading={isLoading}><DeleteIcon /></LoadingButton>\n              </ButtonGroup>\n            </ListItem>\n          ))}\n      </List>\n      <Box my={2} sx={{ display: { xs: 'flex', md: 'none' }, justifyContent: 'center' }}>\n        <Pagination\n          count={Math.ceil(filteredContactsList.length / 10)}\n          page={listPage}\n          onChange={handleChangeListPage}\n        />\n      </Box>\n      <Snackbar autoHideDuration={1000} open={open} onClose={handleClose} message={message} />\n      <ContactModal contactObj={contact} openModal={openModal} setOpenModal={setOpenModal} />\n    </>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterSelector } from 'redux/filter';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { Typography, Box, TextField } from '@mui/material';\nimport debounce from 'lodash.debounce';\n\nexport default function Filter() {\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  const debouncedFilter = debounce((text) => dispatch(changeFilter(text)), 350);\n\n  const onChange = event => {\n    debouncedFilter(event.target.value);\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '10px',\n        textAlign: 'center',\n        marginBottom: '15px',\n      }}\n    >\n      <Typography>Find contact by name</Typography>\n      <TextField\n        variant='standard'\n        type='text'\n        name='filter'\n        onChange={onChange}\n        value={filter}\n      />\n    </Box>\n  );\n}\n","import ContactForm from \"components/ContactForm\";\nimport ContactsTable from 'components/ContactsTable';\nimport { Typography, Box } from '@mui/material';\nimport Filter from 'components/Filter';\n\nexport default function ContactsPage() {\n  return (\n    <Box>\n      <Typography variant='h4' component='h1' align='center' gutterBottom mt={2}>Phonebook Contacts</Typography>\n      <ContactForm />\n      <Filter />\n      <ContactsTable />\n    </Box>\n  );\n}\n"],"names":["useContactForm","useState","name","setName","number","setNumber","id","useId","openModal","setOpenModal","handleInputChange","event","target","value","resetForm","useSnackbar","snackbar","setSnackbar","open","message","setMessage","prevState","handleClose","reason","ContactForm","contacts","useGetAllContactsQuery","data","usePostContactMutation","postContact","isLoading","isSuccess","useEffect","handleSubmit","preventDefault","find","contact","toLowerCase","Box","component","autoComplete","onSubmit","sx","display","justifyContent","flexDirection","xs","md","gap","alignItems","marginBottom","TextField","autoFocus","margin","label","type","variant","pattern","title","required","placeholder","onChange","LoadingButton","startIcon","Add","onClick","loading","lineHeight","Snackbar","autoHideDuration","onClose","styled","TableCell","theme","tableCellClasses","backgroundColor","palette","primary","dark","color","common","white","fontSize","TableRow","action","hover","border","ContactModal","contactObj","useEditContactByIdMutation","editContact","handleModalClose","Dialog","DialogTitle","DialogContent","fullWidth","DialogActions","Edit","Button","ContactsTableItem","handleEdit","handleDelete","useDeleteContactByIdMutation","scope","Typography","align","ButtonGroup","Delete","ContactsTable","page","setPage","listPage","setListPage","rowsPerPage","setRowsPerPage","setContact","deletedContact","setDeletedContact","filter","useSelector","filterSelector","filteredContactsList","useMemo","includes","sort","a","b","localeCompare","deleteContact","reset","dispatch","useDispatch","contactsApi","contactId","contactName","TableContainer","Paper","Table","minWidth","size","TableHead","TableBody","slice","map","item","TablePagination","rowsPerPageOptions","count","length","onPageChange","newPage","onRowsPerPageChange","parseInt","List","ListItem","ListItemText","my","Pagination","Math","ceil","Filter","debouncedFilter","debounce","text","changeFilter","textAlign","ContactsPage","gutterBottom","mt"],"sourceRoot":""}