{"version":3,"file":"static/js/359.6dcd857f.chunk.js","mappings":"gMACA,EAAuB,qB,SCER,SAASA,EAAT,GAA2B,IAATC,EAAQ,EAARA,KAC/B,OACE,eAAIC,UAAWC,EAAf,SAA6BF,IAIjCG,aAAaC,UAAY,CACvBJ,KAAMK,IAAAA,OAAAA,a,+JCTR,EAAuB,wBAAvB,EAAwD,0BAAxD,EAA0F,yBAA1F,EAA2H,yBAA3H,EAA6J,0B,SCM9I,SAASC,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MACxB,GAAqFE,EAAAA,EAAAA,MAArF,eAAOC,EAAP,YAAoBC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,gBAAiBC,EAAlD,EAAkDA,UAAWC,EAA7D,EAA6DA,UAAWC,EAAxE,EAAwEA,QAExEC,QAAQC,IAAI,QAASP,EAAM,IAAK,SAAUC,EAAO,IAAK,mBAAoBC,EAAiB,IAAK,YAAaC,EAAW,IAAK,aAAcC,EAAW,IAAK,WAAYC,GAEvK,IAAMG,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACD,UAATD,EACFnB,EAASoB,GACS,aAATD,GACTjB,EAAYkB,IASVC,EAAY,mCAAG,WAAOJ,GAAP,wEACnBA,EAAMK,iBADa,SAEbf,EAAU,CAAER,MAAAA,EAAOE,SAAAA,IAFN,OAJnBD,EAAS,IACTE,EAAY,IAGO,2CAAH,sDAOlB,OACE,iCACE,kBACEV,UAAWC,EACX8B,aAAa,KACbC,SAAUH,EAHZ,WAKE,iBAAK7B,UAAWC,EAAhB,WACE,kBACED,UAAWC,EACXgC,QAAStB,EAFX,sBAKA,kBACEX,UAAWC,EACXiC,KAAK,QACLP,KAAK,QACLQ,MAAM,gBACNC,UAAQ,EACRC,GAAI1B,EACJ2B,YAAY,oBACZC,SAAUf,EACVI,MAAOrB,QAGX,iBAAKP,UAAWC,EAAhB,WACE,kBACED,UAAWC,EACXgC,QAASpB,EAFX,yBAKA,kBACEb,UAAWC,EACXiC,KAAK,WACLP,KAAK,WACLa,UAAW,EACXL,MAAM,0IACNC,UAAQ,EACRC,GAAIxB,EACJyB,YAAY,WACZC,SAAUf,EACVI,MAAOnB,QAGX,oBACET,UAAWC,EACXiC,KAAK,SACLP,KAAK,gBACLc,SAAUtB,EAJZ,UAMGA,IAAa,SAAC,IAAD,CAAYuB,KAAM,GAAIC,MAAM,UACxCxB,IAAa,6CAGlBC,IAAc,uBAAIwB,KAAKC,UAAU7B,QCxFzB,SAAS8B,IACtB,OACE,iCACE,SAAChD,EAAA,EAAD,CAAQC,KAAK,6BACb,SAACM,EAAD","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Header/Header.module.css?4e72","components/Header/Header.jsx","webpack://goit-react-hw-08-phonebook/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Header_text__4jGdp\"};","import PropTypes from 'prop-types';\nimport styles from './Header.module.css';\n\nexport default function Header({ text }) {\n  return (\n    <h1 className={styles.text}>{text}</h1>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"fields\":\"LoginForm_fields__ZPX58\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"button\":\"LoginForm_button__LodJg\"};","import { useState } from 'react';\nimport { useLoginUserMutation } from 'service/authorizationApi';\nimport { nanoid } from 'nanoid';\n// import { toast } from 'react-toastify';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport styles from './LoginForm.module.css';\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n  const [loginUser, { data, error, isUninitialized, isLoading, isSuccess, isError }] = useLoginUserMutation();\n\n  console.log('data:', data, ';', 'error:', error, ';', 'isUninitialized:', isUninitialized, ';', 'isLoading', isLoading, ';', 'isSuccess:', isSuccess, ';', 'isError:', isError );\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'email') {\n      setEmail(value);\n    } else if (name === 'password') {\n      setPassword(value);\n    }\n  };\n\n  const resetForm = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await loginUser({ email, password });\n    // toast.info(`${name} is successfully added to Contacts List!`);\n    resetForm();\n  };\n\n  return (\n    <>\n      <form\n        className={styles.form}\n        autoComplete='on'\n        onSubmit={handleSubmit}\n      >\n        <div className={styles.fields}>\n          <label\n            className={styles.label}\n            htmlFor={emailInputId}>\n            Email *\n          </label>\n          <input\n            className={styles.input}\n            type='email'\n            name='email'\n            title='Email address'\n            required\n            id={emailInputId}\n            placeholder='olomaka@gmail.com'\n            onChange={handleInputChange}\n            value={email}\n          />\n        </div>\n        <div className={styles.fields}>\n          <label\n            className={styles.label}\n            htmlFor={passwordInputId}>\n            Password *\n          </label>\n          <input\n            className={styles.input}\n            type='password'\n            name='password'\n            minLength={8}\n            title='Password must be longer, than 8 characters, contain at least one number and one uppercase character, not contain spaces and parentheses'\n            required\n            id={passwordInputId}\n            placeholder='pa$sw0rD'\n            onChange={handleInputChange}\n            value={password}\n          />\n        </div>\n        <button\n          className={styles.button}\n          type='submit'\n          name='submit_button'\n          disabled={isLoading}\n        >\n          {isLoading && <ClipLoader size={16} color='#fff' />}\n          {!isLoading && <span>Register</span>}\n        </button>\n      </form>\n      {isSuccess && (<p>{JSON.stringify(data)}</p>)}\n    </>\n  );\n};\n","import Header from \"components/Header\";\nimport LoginForm from \"components/LoginForm\";\n\nexport default function LoginPage() {\n  return (\n    <>\n      <Header text='Enter Login Credentials'/>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["Header","text","className","styles","Notification","propTypes","PropTypes","LoginForm","useState","email","setEmail","password","setPassword","emailInputId","nanoid","passwordInputId","useLoginUserMutation","loginUser","data","error","isUninitialized","isLoading","isSuccess","isError","console","log","handleInputChange","event","target","name","value","handleSubmit","preventDefault","autoComplete","onSubmit","htmlFor","type","title","required","id","placeholder","onChange","minLength","disabled","size","color","JSON","stringify","LoginPage"],"sourceRoot":""}