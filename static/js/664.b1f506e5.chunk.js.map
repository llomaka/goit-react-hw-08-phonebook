{"version":3,"file":"static/js/664.b1f506e5.chunk.js","mappings":"gMACA,EAAuB,qB,SCER,SAASA,EAAT,GAA2B,IAATC,EAAQ,EAARA,KAC/B,OACE,eAAIC,UAAWC,EAAf,SAA6BF,IAIjCG,aAAaC,UAAY,CACvBJ,KAAMK,IAAAA,OAAAA,a,+JCTR,EAAuB,2BAAvB,EAA2D,6BAA3D,EAAgG,4BAAhG,EAAoI,4BAApI,EAAyK,6B,SCM1J,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MACxB,GAAsFG,EAAAA,EAAAA,MAAtF,eAAOC,EAAP,YAAqBC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,gBAAiBC,EAAnD,EAAmDA,UAAWC,EAA9D,EAA8DA,UAAWC,EAAzE,EAAyEA,QAEzEC,QAAQC,IAAI,QAASP,EAAM,IAAK,SAAUC,EAAO,IAAK,mBAAoBC,EAAiB,IAAK,YAAaC,EAAW,IAAK,aAAcC,EAAW,IAAK,WAAYC,GAEvK,IAAMG,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,OAAtBtB,EAAR,EAAQA,KAAMuB,EAAd,EAAcA,MACD,SAATvB,EACFC,EAAQsB,GACU,UAATvB,EACTG,EAASoB,GACS,aAATvB,GACTK,EAAYkB,IAUVC,EAAY,mCAAG,WAAOH,GAAP,wEACnBA,EAAMI,iBADa,SAEbd,EAAW,CAAEX,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,IAFb,OALnBH,EAAQ,IACRE,EAAS,IACTE,EAAY,IAGO,2CAAH,sDAOlB,OACE,iCACE,kBACEZ,UAAWC,EACXgC,aAAa,KACbC,SAAUH,EAHZ,WAKE,iBAAK/B,UAAWC,EAAhB,WACE,kBACED,UAAWC,EACXkC,QAAStB,EAFX,qBAKA,kBACEb,UAAWC,EACXmC,KAAK,OACL7B,KAAK,OACL8B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,GAAI3B,EACJ4B,YAAY,oBACZC,SAAUf,EACVG,MAAOvB,QAGX,iBAAKP,UAAWC,EAAhB,WACE,kBACED,UAAWC,EACXkC,QAASpB,EAFX,sBAKA,kBACEf,UAAWC,EACXmC,KAAK,QACL7B,KAAK,QACL+B,MAAM,gBACNC,UAAQ,EACRC,GAAIzB,EACJ0B,YAAY,oBACZC,SAAUf,EACVG,MAAOrB,QAGX,iBAAKT,UAAWC,EAAhB,WACE,kBACED,UAAWC,EACXkC,QAASnB,EAFX,yBAKA,kBACEhB,UAAWC,EACXmC,KAAK,WACL7B,KAAK,WACLoC,UAAW,EACXL,MAAM,0IACNC,UAAQ,EACRC,GAAIxB,EACJyB,YAAY,WACZC,SAAUf,EACVG,MAAOnB,QAGX,oBACEX,UAAWC,EACXmC,KAAK,SACL7B,KAAK,gBACLqC,SAAUtB,EAJZ,UAMGA,IAAa,SAAC,IAAD,CAAYuB,KAAM,GAAIC,MAAM,UACxCxB,IAAa,6CAGlBC,IAAc,uBAAIwB,KAAKC,UAAU7B,QChHzB,SAAS8B,IACtB,OACE,iCACE,SAACnD,EAAA,EAAD,CAAQC,KAAK,gCACb,SAACM,EAAD","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Header/Header.module.css?4e72","components/Header/Header.jsx","webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Header_text__4jGdp\"};","import PropTypes from 'prop-types';\nimport styles from './Header.module.css';\n\nexport default function Header({ text }) {\n  return (\n    <h1 className={styles.text}>{text}</h1>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"fields\":\"RegisterForm_fields__pz+7B\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"button\":\"RegisterForm_button__B3hFq\"};","import { useState } from 'react';\nimport { useCreateUserMutation } from 'service/authorizationApi';\nimport { nanoid } from 'nanoid';\n// import { toast } from 'react-toastify';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport styles from './RegisterForm.module.css';\n\nexport default function RegisterForm() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n  const [createUser, { data, error, isUninitialized, isLoading, isSuccess, isError }] = useCreateUserMutation();\n\n  console.log('data:', data, ';', 'error:', error, ';', 'isUninitialized:', isUninitialized, ';', 'isLoading', isLoading, ';', 'isSuccess:', isSuccess, ';', 'isError:', isError );\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'email') {\n      setEmail(value);\n    } else if (name === 'password') {\n      setPassword(value);\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await createUser({ name, email, password });\n    // toast.info(`${name} is successfully added to Contacts List!`);\n    resetForm();\n  };\n\n  return (\n    <>\n      <form\n        className={styles.form}\n        autoComplete='on'\n        onSubmit={handleSubmit}\n      >\n        <div className={styles.fields}>\n          <label\n            className={styles.label}\n            htmlFor={nameInputId}>\n            Name *\n          </label>\n          <input\n            className={styles.input}\n            type='text'\n            name='name'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n            placeholder='Oleksandra Lomaka'\n            onChange={handleInputChange}\n            value={name}\n          />\n        </div>\n        <div className={styles.fields}>\n          <label\n            className={styles.label}\n            htmlFor={emailInputId}>\n            Email *\n          </label>\n          <input\n            className={styles.input}\n            type='email'\n            name='email'\n            title='Email address'\n            required\n            id={emailInputId}\n            placeholder='olomaka@gmail.com'\n            onChange={handleInputChange}\n            value={email}\n          />\n        </div>\n        <div className={styles.fields}>\n          <label\n            className={styles.label}\n            htmlFor={passwordInputId}>\n            Password *\n          </label>\n          <input\n            className={styles.input}\n            type='password'\n            name='password'\n            minLength={8}\n            title='Password must be longer, than 8 characters, contain at least one number and one uppercase character, not contain spaces and parentheses'\n            required\n            id={passwordInputId}\n            placeholder='pa$sw0rD'\n            onChange={handleInputChange}\n            value={password}\n          />\n        </div>\n        <button\n          className={styles.button}\n          type='submit'\n          name='submit_button'\n          disabled={isLoading}\n        >\n          {isLoading && <ClipLoader size={16} color='#fff' />}\n          {!isLoading && <span>Register</span>}\n        </button>\n      </form>\n      {isSuccess && (<p>{JSON.stringify(data)}</p>)}\n    </>\n  );\n};\n","import Header from \"components/Header\";\nimport RegisterForm from \"components/RegisterForm\";\n\nexport default function RegisterPage() {\n  return (\n    <>\n      <Header text='New User Registration Form' />\n      <RegisterForm />\n    </>\n  );\n}\n"],"names":["Header","text","className","styles","Notification","propTypes","PropTypes","RegisterForm","useState","name","setName","email","setEmail","password","setPassword","nameInputId","nanoid","emailInputId","passwordInputId","useCreateUserMutation","createUser","data","error","isUninitialized","isLoading","isSuccess","isError","console","log","handleInputChange","event","target","value","handleSubmit","preventDefault","autoComplete","onSubmit","htmlFor","type","pattern","title","required","id","placeholder","onChange","minLength","disabled","size","color","JSON","stringify","RegisterPage"],"sourceRoot":""}